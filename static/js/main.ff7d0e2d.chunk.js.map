{"version":3,"sources":["components/Card/index.js","components/Gameboard/index.js","components/Scoreboard/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","imgClasses","outcome","className","src","img","alt","name","key","id","onClick","handleClick","Gameboard","justClicked","plantsArray","map","plant","image","Scoreboard","direction","highScore","currentScore","instructions","Container","state","plants","clicked","clickedArray","score","currentHighScore","includes","setState","arrayShuffle","push","tempArray","i","length","j","Math","floor","random","temp","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff7d0e2d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n//This component will take in props, filling in with info from the plant-list.json\n//This component holds an onClick even which triggers a function\nfunction Card(props) {\n  let imgClasses;\n  if (props.outcome === \"l\") {\n    imgClasses = \"plant-image img-fluid animated bounce\";\n  } else {\n    imgClasses = \"plant-image img-fluid animated pulse\";\n  }\n  return (\n    <div className=\"col-lg-3 img-holder mb-3 animated\">\n      <img\n        className={imgClasses}\n        src={props.img}\n        alt={props.name}\n        key={props.id}\n        onClick={() => props.handleClick(props.id, props.name)}\n      />\n    </div>\n  );\n}\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/index\";\nimport \"./style.css\";\n\nfunction Gameboard(props) {\n  return (\n    <div className=\"col-sm-8 mt-5 gameboard\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 mx-auto\">\n          <h2 className=\"mt-2 mx-auto text-center\">\n            <span>You clicked: </span>\n            <p className=\"plant-name\"> {props.justClicked}</p>\n          </h2>\n          <div className=\"row m-2 mb-3\">\n            {props.plantsArray.map(plant => (\n              <Card\n                outcome={props.outcome}\n                id={plant.id}\n                key={plant.id}\n                name={plant.name}\n                img={plant.image}\n                handleClick={props.handleClick}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Gameboard;\n","import React from \"react\";\nimport \"./style.css\";\n//map each item in the randomized array\n\nfunction Scoreboard(props) {\n  return (\n    <div className=\"col-sm-3 mt-5 ml-5 scoreboard\">\n      <h2 className=\"mt-5 text-center\">Memory Game</h2>\n      <p className=\"mt-5\">\n        Click on a plant. Try to remember each one you've picked. You lose the\n        round when you pick the same plant twice. You get a point for each time\n        you click a unique card. Good luck!\n      </p>\n      <h4 className=\"mt-5 text-center\">{props.direction}</h4>\n      <h4 className=\"mt-5 text-center\">High Score: {props.highScore}</h4>\n      <h4 className=\"mt-5 mb-5 text-center\">\n        Current Score: {props.currentScore}\n      </h4>\n    </div>\n  );\n}\n\nexport default Scoreboard;\n","import React, { Component } from \"react\";\nimport Gameboard from \"../Gameboard/index\";\nimport Scoreboard from \"../Scoreboard\";\nimport plants from \"../plantList.json\";\nimport \"./style.css\";\n\n//This is where the majority of the game logic will go.\n//Within the gameboard component I'll need to map the randomized array of plants into cards\n\n//\nconst instructions = [\n  \"Click on a plant to begin the game\",\n  //changes to [1] once game has started. [2] when the second click occurs\n  \"Keep clicking!\",\n  \"Start over!\"\n];\n\nclass Container extends Component {\n  //this sets the initial state, when everything is loaded. On click events with trigger changes in state\n  state = {\n    //pass on click to scoreboard\n\n    //Direction state will trigger\n    direction: instructions[0],\n    //This will be changed by the arrayShuffle once I get the images showing.\n    plantsArray: plants,\n    //This will be given to the Gameboard component, it will show the user the name of the plant they clicked on most recently.\n    justClicked: \"\",\n    //this will hold an array of the id's of the cards that have been clicked\n    clicked: [],\n    //This will increase each time until the user double clicks, then reset to 0\n    currentScore: 0,\n    // if current score >= high score, replaces high score\n    highScore: 0,\n    outcome: \"w\"\n  };\n\n  handleClick = (id, name) => {\n    // this is triggered in the card component. How doe s\n    const clickedArray = [...this.state.clicked];\n    let score = this.state.currentScore;\n    let currentHighScore = this.state.highScore;\n    if (currentHighScore <= score) {\n      currentHighScore = score;\n    }\n    if (clickedArray.includes(id)) {\n      this.setState({\n        direction: instructions[2],\n        highScore: currentHighScore,\n        currentScore: 0,\n        clicked: [],\n        justClicked: name,\n        plantsArray: this.arrayShuffle(),\n        outcome: \"l\"\n      });\n    } else {\n      score++;\n      clickedArray.push(id);\n\n      this.setState({\n        direction: instructions[1],\n        currentScore: score,\n        clicked: clickedArray,\n        justClicked: name,\n        plantsArray: this.arrayShuffle(),\n        outcome: \"w\"\n      });\n    }\n\n    // on click, needs to check  this.state.clicked to see if the id is already in the array of clicked objects.\n    // if the object has already been clicked:\n    //game over - current score is reset to zero\n    //set directions to instructions[2]\n    // else increase current score +1\n    //if currentscore >= highscore, set high score\n    //set just clicked which sends the name of the plant they just clicked to the gameboard component.\n    // then triggers arrayShuffle(this.state.plantsArray)\n    // updates the plantsArray state to arrayshuffle.\n  };\n\n  arrayShuffle() {\n    // Takes in the array of plants from the json\n    //Durstenfeld Shuffle\n    let tempArray = [...plants];\n    for (let i = tempArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = tempArray[i];\n      tempArray[i] = tempArray[j];\n      tempArray[j] = temp;\n    }\n    return tempArray;\n  }\n\n  // this is what rerenders when react senses a change.\n  render() {\n    console.log(this.state.currentScore);\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <Gameboard\n            outcome={this.state.outcome}\n            justClicked={this.state.justClicked}\n            plantsArray={this.state.plantsArray}\n            handleClick={this.handleClick}\n          />\n          <Scoreboard\n            direction={this.state.direction}\n            highScore={this.state.highScore}\n            currentScore={this.state.currentScore}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Container;\n","import React from \"react\";\nimport Container from \"./components/Container/index\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}